<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Casts\AsArrayObject;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Log;

class BlogPost extends Model
{
    use HasFactory;

    protected $fillable = [
        'title', 'user_id', 'posted', 
        'edited', 'subtitle', 'body', 
        'is_public', 'tags', 'imageUrl'
    ];

    protected $casts = [
        'posted' => 'datetime:Y-m-d H:i:s',
        'edited' => 'datetime:Y-m-d H:i:s',
        'is_public' => 'bool', 
        'tags' => 'array',
    ];

    const NOT_POSTED = 'not posted';

    const NOT_EDITED = 'never edited';

    //on-save, update edited / posted
    protected static function boot()
    {
        static::saving(function ($blogPost) {
            if ($blogPost->posted == self::NOT_POSTED && $blogPost->is_public == true) {
                $blogPost->posted = Carbon::now()->toDateTime();
            }
            $blogPost->edited = Carbon::now()->toDateTime();
        });
        parent::boot(); // TODO: Change the autogenerated stub
    }

    //accessors & mutators
    public function getPostedForHumansAttribute(): Attribute
    {
        return Attribute::make(get: 
            fn () => 
                $this->posted !== null 
                    ? $this->posted->diffForHumans(Carbon::now()).' now' 
                    : self::NOT_EDITED
        );
    }

    public function getEditedForHumansAttribute(): Attribute
    {
        return Attribute::make(get: 
            fn () => 
                $this->edited !== null 
                    ? $this->edited->diffForHumans(Carbon::now()).' now' 
                    : self::NOT_EDITED
        );
    }

    //scopes
    public function scopePublic($query)
    {
        return $query->where('is_public', true);
    }

    //relations
    public function author()
    {
        return $this->belongsTo(User::class);
    }
}
